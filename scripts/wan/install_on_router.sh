#!/usr/bin/env bash
# install_on_router.sh
# Usage:
#   ./install_on_router.sh user@router \
#     --edge-cidr 10.10.0.1/24 --cloud-cidr 10.20.0.1/24 [--profile moderate]
#
# Requires: target user must have passwordless sudo for: mkdir, mv, chmod, tee, ip

set -euo pipefail

# Resolve directory of this script (handles symlinks and relative paths)
SCRIPT_SRC="${BASH_SOURCE[0]}"
while [ -h "$SCRIPT_SRC" ]; do
  SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_SRC")" && pwd)"
  SCRIPT_SRC="$(readlink "$SCRIPT_SRC")"
  [[ "$SCRIPT_SRC" != /* ]] && SCRIPT_SRC="$SCRIPT_DIR/$SCRIPT_SRC"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_SRC")" && pwd)"

ROUTER="${1:?SSH target, e.g., user@10.0.0.1}"
shift || true

EDGE_CIDR=""
CLOUD_CIDR=""
PROFILE=""

while [[ $# -gt 0 ]]; do
  case "$1" in
    --edge-cidr) EDGE_CIDR="${2:?}"; shift 2 ;;
    --cloud-cidr) CLOUD_CIDR="${2:?}"; shift 2 ;;
    --profile) PROFILE="${2:?good|moderate|poor|clear}"; shift 2 ;;
    *) echo "Unknown arg: $1" >&2; exit 1 ;;
  esac
done

require_sudo_nopass() {
  echo "[*] Checking sudo on $ROUTER ..."
  # -n to be non-interactive; will fail if password is required
  if ! ssh "$ROUTER" "sudo -n true" 2>/dev/null; then
    echo "ERROR: sudo on $ROUTER requires a password or is not permitted." >&2
    echo "Please configure passwordless sudo for the target user, e.g.:" >&2
    echo "  echo 'USER ALL=(ALL) NOPASSWD:ALL' | sudo tee /etc/sudoers.d/USER" >&2
    echo "Or run this script with a user that has passwordless sudo." >&2
    exit 1
  fi
}

copy_scripts() {
  echo "[*] Copying WAN scripts to $ROUTER ..."
  ssh "$ROUTER" "sudo -n mkdir -p /usr/local/sbin/wan /etc/wan"
  # Explicitly copy only .sh files; fail if none found
  mapfile -t LOCAL_SCRIPTS < <(ls -1 "$SCRIPT_DIR"/*.sh 2>/dev/null || true)
  if [[ "${#LOCAL_SCRIPTS[@]}" -eq 0 ]]; then
    echo "ERROR: No .sh scripts found in $SCRIPT_DIR" >&2
    exit 1
  fi
  scp "${LOCAL_SCRIPTS[@]}" "$ROUTER":/tmp/
  # Use a loop to avoid globbing issues
  ssh "$ROUTER" 'set -e; for f in /tmp/*.sh; do sudo -n mv "$f" /usr/local/sbin/wan/; done; sudo -n chmod +x /usr/local/sbin/wan/*.sh'
}

detect_ifaces_on_router() {
  echo "[*] Detecting interfaces on router ..."
  # Build remote detection script
  TMP_LOCAL="$(mktemp)"
  cat >"$TMP_LOCAL" <<'RS'
set -euo pipefail

EDGE_CIDR_IN="${EDGE_CIDR_IN:-}"
CLOUD_CIDR_IN="${CLOUD_CIDR_IN:-}"

edge_ip=""
cloud_ip=""
edge_if=""
cloud_if=""

# Helper: get interface by network CIDR (finds interfaces in the given network)
iface_by_cidr() {
  local cidr="$1"
  local network="${cidr%/*}"
  local prefix="${cidr#*/}"

  # Find interface with IP in this network
  sudo -n ip -o -4 addr show | while read -r line; do
    iface=$(echo "$line" | awk '{print $2}')
    ip_cidr=$(echo "$line" | awk '{print $4}')
    ip_addr="${ip_cidr%/*}"

    # Check if this IP is in the target network
    if ip route get "$ip_addr" from "$network/$prefix" 2>/dev/null | grep -q "dev $iface"; then
      echo "$iface"
      break
    fi
  done 2>/dev/null || true
}

# Alternative simpler approach - find interface with IP in the network range
iface_by_network() {
  local cidr="$1"
  local network="${cidr%/*}"
  local prefix="${cidr#*/}"

  # Convert to first 3 octets for /24 networks
  if [[ "$prefix" == "24" ]]; then
    local net_prefix="${network%.*}"
    sudo -n ip -o -4 addr show | awk -v prefix="$net_prefix" '
      $4 ~ "^"prefix"\\." {print $2; exit}
    '
  else
    # For non-/24 networks, fall back to exact match
    sudo -n ip -o -4 addr show | awk -v ip="$network" '$0 ~ ip {print $2; exit}'
  fi
}

if [[ -n "$EDGE_CIDR_IN" ]]; then
  edge_ip="${EDGE_CIDR_IN%%/*}"
  edge_if="$(iface_by_network "$EDGE_CIDR_IN" || true)"
fi
if [[ -n "$CLOUD_CIDR_IN" ]]; then
  cloud_ip="${CLOUD_CIDR_IN%%/*}"
  cloud_if="$(iface_by_network "$CLOUD_CIDR_IN" || true)"
fi

# Auto-guess if still empty: pick two distinct ethernet-like ifaces
if [[ -z "$edge_if" || -z "$cloud_if" || "$edge_if" == "$cloud_if" ]]; then
  mapfile -t CANDS < <(sudo -n ip -o -4 addr show | awk '{print $2}' | grep -E '^(en|eth|ens|enp|eno)' | sort -u)
  if [[ "${#CANDS[@]}" -ge 2 ]]; then
    if [[ -z "$edge_if" && -n "$EDGE_CIDR_IN" ]]; then
      edge_if="$(iface_by_network "$EDGE_CIDR_IN" || true)"
    fi
    if [[ -z "$cloud_if" && -n "$CLOUD_CIDR_IN" ]]; then
      cloud_if="$(iface_by_network "$CLOUD_CIDR_IN" || true)"
    fi
    if [[ -z "$edge_if" ]]; then edge_if="${CANDS[0]}"; fi
    if [[ -z "$cloud_if" ]]; then
      for i in "${CANDS[@]}"; do
        if [[ "$i" != "$edge_if" ]]; then cloud_if="$i"; break; fi
      done
    fi
  fi
fi

if [[ -z "$edge_if" || -z "$cloud_if" || "$edge_if" == "$cloud_if" ]]; then
  echo "ERROR: Failed to detect two distinct interfaces for EDGE_IF and CLOUD_IF." >&2
  sudo -n ip -o -4 addr show >&2 || true
  exit 1
fi

# Persist env
sudo -n mkdir -p /etc/wan
cat <<EOF | sudo -n tee /etc/wan/env >/dev/null
# Autogenerated by install_on_router.sh
export EDGE_IF="$edge_if"
export CLOUD_IF="$cloud_if"
export EDGE_CIDR="${EDGE_CIDR_IN}"
export CLOUD_CIDR="${CLOUD_CIDR_IN}"
export EDGE_IP="${edge_ip}"
export CLOUD_IP="${cloud_ip}"
export PATH="/usr/local/sbin/wan:\$PATH"
EOF

echo "Detected EDGE_IF=$edge_if CLOUD_IF=$cloud_if"
RS
  scp "$TMP_LOCAL" "$ROUTER":/tmp/wan_detect.sh
  rm -f "$TMP_LOCAL"
  set +e
  REMOTE_OUT="$(ssh -tt "$ROUTER" "EDGE_CIDR_IN='$EDGE_CIDR' CLOUD_CIDR_IN='$CLOUD_CIDR' bash /tmp/wan_detect.sh" 2>&1)"
  RC=$?
  set -e
  echo "[*] Remote output (rc=$RC):"
  echo "$REMOTE_OUT"
  if [[ $RC -ne 0 ]]; then
    exit $RC
  fi
}

validate_detection() {
  echo "[*] Validation: show ifaces"
  ssh "$ROUTER" "set -e; . /etc/wan/env; sudo -n ip -o -4 addr show dev \"\$EDGE_IF\"; sudo -n ip -o -4 addr show dev \"\$CLOUD_IF\"; true"
}

apply_optional_profile() {
  if [[ -n "$PROFILE" ]]; then
    echo "[*] Applying profile '$PROFILE' ..."
    ssh "$ROUTER" "set -e; . /etc/wan/env; sudo -n /usr/local/sbin/wan/apply_wan.sh '$PROFILE'"
  else
    echo "[*] Skipping profile apply (none requested)."
  fi
}

require_sudo_nopass
copy_scripts
detect_ifaces_on_router
validate_detection
apply_optional_profile

echo "[*] Done. Router is ready. You can now run:"
echo "    ssh $ROUTER 'sudo -n /usr/local/sbin/wan/apply_wan.sh good|moderate|poor|clear'"