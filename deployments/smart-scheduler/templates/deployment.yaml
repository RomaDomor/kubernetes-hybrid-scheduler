apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "smart-scheduler.fullname" . }}-controller
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "smart-scheduler.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "smart-scheduler.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "smart-scheduler.selectorLabels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ .Values.serviceAccountName }}
      automountServiceAccountToken: true
      securityContext:
        {{- toYaml .Values.securityContext.pod | nindent 8 }}
      initContainers:
        - name: wait-for-certs
          image: busybox:1.36
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c']
          args:
            - |
              echo "Waiting for webhook certificate secret to be populated..."
              while [ ! -f /certs/tls.crt ]; do
                sleep 2
              done
              echo "Certificate found."
          volumeMounts:
            - name: certs
              mountPath: /certs
              readOnly: true
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL
            seccompProfile:
              type: RuntimeDefault
            {{- if .Values.enableAppArmor }}
            appArmorProfile:
              type: RuntimeDefault
            {{- end }}
          resources:
            requests:
              cpu: 10m
              memory: 16Mi
            limits:
              cpu: 50m
              memory: 64Mi
      containers:
        - name: controller
          image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext.container | nindent 12 }}
            {{- if .Values.enableAppArmor }}
            appArmorProfile:
              type: RuntimeDefault
            {{- end }}
          ports:
            - containerPort: {{ .Values.service.targetPorts.https }}
              name: webhook
              protocol: TCP
            - containerPort: {{ .Values.service.targetPorts.metrics }}
              name: metrics
              protocol: TCP
          command:
            - /smart-scheduler
          {{- if .Values.logLevel }}
          args:
            - "--v={{ .Values.logLevel }}"
          {{- end }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              path: /readyz
              port: metrics
              scheme: HTTP
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
          startupProbe:
            httpGet:
              path: /readyz
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 30
          volumeMounts:
            - name: certs
              mountPath: /certs
              readOnly: true
            - name: tmp
              mountPath: /tmp
          env:
            {{- range $key, $val := .Values.config }}
            - name: {{ $key | snakecase | upper }}
              valueFrom:
                configMapKeyRef:
                  name: {{ include "smart-scheduler.fullname" $ }}-config
                  key: {{ $key }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: certs
          secret:
            secretName: {{ .Values.webhookSecretName }}
            defaultMode: 0400
        - name: tmp
          emptyDir: {}
      {{- if .Values.affinity }}
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- range .Values.topologySpreadConstraints }}
        - maxSkew: {{ .maxSkew }}
          topologyKey: {{ .topologyKey }}
          whenUnsatisfiable: {{ .whenUnsatisfiable }}
          labelSelector:
            matchLabels:
              {{- include "smart-scheduler.selectorLabels" $ | nindent 14 }}
        {{- end }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      dnsPolicy: ClusterFirst
      restartPolicy: Always