apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  labels: { app: api-gateway }
  annotations:
    slo.class: "latency"
    slo.latency.ms: "150"
    slo.max-offload-penalty.ms: "50"
spec:
  replicas: 1
  selector:
    matchLabels: { app: api-gateway }
  template:
    metadata:
      labels: { app: api-gateway }
    spec:
      containers:
        - name: gateway
          image: python:3.11-slim
          ports:
            - containerPort: 8080
          command:
            - bash
            - -c
            - |
              pip install --no-cache-dir flask requests
              python - <<'PY'
              from flask import Flask, jsonify
              import requests, time, os
              app = Flask(__name__)
              BACKEND = os.getenv("BACKEND_URL", "http://stream-processor.default:8080")
              @app.get("/health")
              def health(): return jsonify({"status":"ok"})
              @app.get("/aggregate")
              def aggregate():
                  # Makes 5 sequential calls to backend
                  t0 = time.time()
                  results = []
                  for i in range(5):
                      try:
                          r = requests.get(f"{BACKEND}/health", timeout=1)
                          results.append(r.json())
                      except: results.append({"error": "timeout"})
                  return jsonify({
                      "results": results,
                      "total_time_ms": (time.time()-t0)*1000
                  })
              app.run(host="0.0.0.0", port=8080)
              PY
          env:
            - name: BACKEND_URL
              value: "http://stream-processor:8080"
          resources:
            requests: { cpu: "100m", memory: "128Mi" }
            limits: { cpu: "200m", memory: "256Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
spec:
  selector: { app: api-gateway }
  ports:
    - port: 8080
      targetPort: 8080