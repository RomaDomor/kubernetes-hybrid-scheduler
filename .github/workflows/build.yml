name: CI/CD Smart Scheduler

on:
  push:
    branches: [main]
    tags:
      - "v*"
  pull_request:
    branches: [main]

env:
  IMAGE_REPO: ghcr.io/${{ github.repository_owner }}/kubernetes-smart-scheduler
  PLATFORM: linux/amd64
  # If you prefer multi-arch, set: linux/amd64,linux/arm64

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: controller
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24"

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('controller/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Go mod download
        run: |
          go mod download

      - name: Go build (sanity)
        run: |
          CGO_ENABLED=0 go build -o smart-scheduler ./cmd/controller

      - name: Run unit tests
        run: |
          go test ./... -v

  docker:
    name: Build and Push Image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute lowercase owner
        id: owner
        shell: bash
        run: |
          echo "lc=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Set IMAGE_REPO env
        run: echo "IMAGE_REPO=ghcr.io/${{ steps.owner.outputs.lc }}/kubernetes-smart-scheduler" >> $GITHUB_ENV

      - name: Derive version
        id: ver
        shell: bash
        run: |
          ref_type="${GITHUB_REF_TYPE}"
          ref_name="${GITHUB_REF_NAME}"
          branch="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          safe_branch="$(echo "$branch" | tr '[:upper:]' '[:lower:]' | tr -cs 'a-z0-9._-' '-')"
          short_sha="$(git rev-parse --short=8 HEAD)"

          if [[ "$ref_type" == "tag" && "$ref_name" =~ ^v[0-9] ]]; then
            VERSION="$ref_name"
            EXTRA_TAGS="latest"
          elif [[ "$ref_type" == "branch" && "$ref_name" == "main" ]]; then
            VERSION="main-${short_sha}"
            EXTRA_TAGS="latest"
          else
            VERSION="dev-${safe_branch}-${short_sha}"
            EXTRA_TAGS=""
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "extra_tags=$EXTRA_TAGS" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:latest

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image tags
        id: tags
        shell: bash
        run: |
          TAGS="${{ env.IMAGE_REPO }}:${{ steps.ver.outputs.version }}"
          if [[ -n "${{ steps.ver.outputs.extra_tags }}" ]]; then
            TAGS+=$'\n'${{ env.IMAGE_REPO }}:latest
          fi
          echo "list<<EOF" >> "$GITHUB_OUTPUT"
          echo "$TAGS" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: ./controller
          file: ./controller/Dockerfile
          platforms: ${{ env.PLATFORM }}
          push: ${{ github.event_name != 'pull_request' || github.repository_owner == github.actor }}
          tags: ${{ steps.tags.outputs.list }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.ver.outputs.version }}
          cache-from: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_REPO }}:buildcache,mode=max

      - name: Print image info
        run: |
          echo "Pushed: $IMAGE_REPO:${{ steps.ver.outputs.version }} and :latest"